#version 460
// Copyright 2021 NVIDIA Corporation
// SPDX-License-Identifier: Apache-2.0
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#include "ao_shared.h"

layout(binding = BINDING_IMAGE_AO, set = 0, r8) uniform image2D imageAO; // Output AO image
layout(binding = BINDING_TLAS, set = 0) uniform accelerationStructureEXT scene;  // C++ puts built AS here

// This sample doesn't use G-buffers to look up the position and normal of each
// pixel; instead, we intersect one primary ray per pixel with the scene, and
// then cast a number of ambient occlusion rays per pixel from that point.

// A location for a ray payload (we can have multiple of these):
layout(location = 0) rayPayloadEXT RayPayload pay;

//-----------------------------------------------------------------------------
// Traces a primary (camera) ray into the scene, returning a world-space
// position and normal for this pixel. This could also be done using
// rasterization (e.g. using a G-buffer from a deferred or forward+ system).
// However, rasterization is not always faster: if occlusion culling isn't
// used, ray tracing can sometimes outperform rasterization! Here, we use ray
// tracing because it makes the overall code shorter.
void GetPixelInfo(uvec2 pixel, out bool hitSky, out vec3 pos, out vec3 norm)
{
  // Use a camera model to generate a ray for this pixel.
  const vec2 pixelCenter       = vec2(gl_LaunchIDEXT.xy) + 0.5;
  const uvec2 resolution       = gl_LaunchSizeEXT.xy;
  const vec2 screenUV          = vec2(1.0, -1.0) * (2.0 * pixelCenter - resolution) / resolution.y;
  const float fovVerticalSlope = 1.0 / 5.0;
  const vec3 orig              = vec3(0.0, 2.0, 14.0);
  const vec3 dir               = normalize(vec3(fovVerticalSlope * screenUV, -1.0));

  // Trace a ray into the scene; get back data in the payload.
  traceRayEXT(scene,  // Acceleration structure
                      // Ray flags, here saying "ignore intersection shaders"
              gl_RayFlagsOpaqueEXT,
              0xFF,   // 8-bit instance mask, here saying "trace against all instances"
              0,      // SBT record offset
              0,      // SBT record stride for offset
              0,      // Miss index
              orig,   // Ray origin
              0.0,    // Minimum t-value
              dir,    // Ray direction
              1000.0, // Maximum t-value
              0);     // Location of payload
  
  // Read the values from the payload:
  hitSky = (pay.hitSky > 0.0);
  pos  = pay.worldPosition;
  norm = pay.worldNormal;
}

//-----------------------------------------------------------------------------
// Returns 1 if the ray `orig + t * dir` reaches the sky, and 0 otherwise.
float ShadowRay(vec3 orig, vec3 dir)
{
  pay.hitSky = 0.0f;  // Assume ray is occluded
  traceRayEXT(scene,   // Acceleration structure
              // Ray flags, here saying "ignore any hit shaders and closest hit
              // shaders, and terminate the ray on the first found intersection"
              gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT | gl_RayFlagsTerminateOnFirstHitEXT,
              0xFF,    // 8-bit instance mask, here saying "trace against all instances"
              0,       // SBT record offset
              0,       // SBT record stride for offset
              0,       // Miss index
              orig,    // Ray origin
              0.0,     // Minimum t-value
              dir,     // Ray direction
              1000.0,  // Maximum t-value
              0);      // Location of payload
  return pay.hitSky;
}

//-----------------------------------------------------------------------------
// offsetPositionAlongNormal shifts a point on a triangle surface so that a
// ray bouncing off the surface with tMin = 0.0 is no longer treated as
// intersecting the surface it originated from.
//
// This code uses an improved technique by Carsten Wächter and
// Nikolaus Binder from "A Fast and Robust Method for Avoiding
// Self-Intersection" from Ray Tracing Gems (verion 1.7, 2020).
// The normal can be negated if one wants the ray to pass through
// the surface instead.
vec3 OffsetPositionAlongNormal(vec3 worldPosition, vec3 normal)
{
  // Convert the normal to an integer offset.
  const float int_scale = 256.0f;
  const ivec3 of_i      = ivec3(int_scale * normal);

  // Offset each component of worldPosition using its binary representation.
  // Handle the sign bits correctly.
  const vec3 p_i = vec3(  //
      intBitsToFloat(floatBitsToInt(worldPosition.x) + ((worldPosition.x < 0) ? -of_i.x : of_i.x)),
      intBitsToFloat(floatBitsToInt(worldPosition.y) + ((worldPosition.y < 0) ? -of_i.y : of_i.y)),
      intBitsToFloat(floatBitsToInt(worldPosition.z) + ((worldPosition.z < 0) ? -of_i.z : of_i.z)));

  // Use a floating-point offset instead for points near (0,0,0), the origin.
  const float origin     = 1.0f / 32.0f;
  const float floatScale = 1.0f / 65536.0f;
  return vec3(  //
      abs(worldPosition.x) < origin ? worldPosition.x + floatScale * normal.x : p_i.x,
      abs(worldPosition.y) < origin ? worldPosition.y + floatScale * normal.y : p_i.y,
      abs(worldPosition.z) < origin ? worldPosition.z + floatScale * normal.z : p_i.z);
}

//-----------------------------------------------------------------------------
// Implementation of GetRandDir

uint rngState = gl_LaunchIDEXT.x * 2000 + gl_LaunchIDEXT.y;

// Steps the random number generator and returns a floating-point value between
// 0 and 1 inclusive.
float StepAndOutputRNGFloat()
{
  // Condensed version of pcg_output_rxs_m_xs_32_32, with simple conversion to floating-point [0,1].
  rngState  = rngState * 747796405 + 1;
  uint word = ((rngState >> ((rngState >> 28) + 4)) ^ rngState) * 277803737;
  word      = (word >> 22) ^ word;
  return float(word) / 4294967295.0f;
}

// Gets a randomly chosen cosine-weighted direction within the unit hemisphere
// defined by the surface normal.
vec3 GetRandCosDir(vec3 norm)
{
  // To generate a cosine-weighted normal, generate a random point on a sphere:
  float theta      = 6.2831853 * StepAndOutputRNGFloat();  // Random in [0, 2pi]
  float z          = 2 * StepAndOutputRNGFloat() - 1.0;    // Random in [-1, 1]
  float r          = sqrt(1.0 - z * z);
  vec3  ptOnSphere = vec3(r * cos(theta), r * sin(theta), z);
  // Then add the normal to it and normalize to make it cosine-weighted on a
  // hemisphere:
  return normalize(ptOnSphere + norm);
}

//-----------------------------------------------------------------------------

void main()
{
  // Determine this pixel's world-space position and normal, whether by
  // using ray tracing or using data from a G-buffer:
  uvec2 pixel = gl_LaunchIDEXT.xy;
  bool pixelIsSky; // Does the pixel show the sky (not an object)?
  vec3 pos, norm;  // AO rays from where?
  GetPixelInfo(pixel, pixelIsSky, pos, norm);
  if(pixelIsSky){
    // Don't compute ambient occlusion for the sky
    imageStore(imageAO, ivec2(pixel), vec4(1.0));
    return;
  }

  // Compute ambient occlusion
  pos           = OffsetPositionAlongNormal(pos, norm); // Avoid self-intersection
  float aoColor = 0.0;
  for(uint i = 0; i < 64; i++)  // Use 64 rays.
    aoColor += ShadowRay(pos, GetRandCosDir(norm)) / 64.0;
  imageStore(imageAO, ivec2(pixel), vec4(aoColor));
}